score[now : cgn[j]] = raw[now : cgn[j]] * mul[j] + add[j]
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = raw[now : cgn[j]] * mul[j] + add[j]
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = raw[now : cgn[j]] * mul[j] + add[j]
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = raw[now : cgn[j]] * mul[j] + add[j]
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
raw[1:3] = 0
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
raw[1:3] = 50
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
raw[1:3] = 1
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
raw[1:3] = 1
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
raw[1:3] = 1
raw[124:130] = 0
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
raw[1:3] = 1
raw[124:130] = 0
now = 1
for(j in 1:length(gn)){
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
mean_vec[i] = mean(score[4:12])
}
mean(sd_vec)
now
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
raw[now : cgn[j]] = 0.5
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
sd_vec[i] = sd(score)
}
mean(sd_vec)
sd_vec
mean_vec[i] = mean(score)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
raw[now : cgn[j]] = 0.5
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
mean_vec[i] = mean(score)
sd_vec[i] = sd(score)
}
mean(mean_vec)
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mid = c(1, 1, 1, 0, 0, 0)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
raw[now : cgn[j]] = mid{j}
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
mean_vec[i] = mean(score)
sd_vec[i] = sd(score)
}
mean(mean_vec)
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mid = c(1, 1, 1, 0, 0, 0)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
raw[now : cgn[j]] = mid[j]
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
mean_vec[i] = mean(score)
sd_vec[i] = sd(score)
}
mean(mean_vec)
mean(sd_vec)
gn = c(3, 9, 28, 43, 40, 7)
cgn = cumsum(gn)
tol = sum(gn)
score = rep(0, tol)
mid = c(1, 1, 1, 0, 0, 0)
mul = c(50, 10, 10, 10, 10, 10)
add = c(0, 50, 60, 70, 80, 90)
n = 2e3
sd_vec = rep(0, n)
mean_vec = rep(0, n)
for(i in 1:2e3){
raw = runif(tol)
now = 1
for(j in 1:length(gn)){
raw[now : cgn[j]] = mid[j]
score[now : cgn[j]] = floor(raw[now : cgn[j]] * mul[j] + add[j])
now = cgn[j] + 1
}
mean_vec[i] = mean(score)
sd_vec[i] = sd(score)
}
mean(mean_vec)
mean(sd_vec)
devtools::install_github("eric40065/CausalAnalysisforSemiCompRisks")
remove.packages("CausalAnalysisforSemiCompRisks")
devtools::install_github("eric40065/CausalAnalysisforSemiCompRisks")
library(CausalAnalysisforSemiCompRisks)
result = CASCR(REVEAL_HBV, downsample = 10, plot_result = T, get_variance = 'a')
result = CASCR(REVEAL_HBV, downsample = 1, plot_result = T, get_variance = 'a')
result = CASCR(REVEAL_HBV, downsample = 5, get_variance = 'asymptotic', plot_result = T)
result = CASCR(REVEAL_HBV, downsample = 5, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result = CASCR(REVEAL_HBV, downsample = 15, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result = CASCR(REVEAL_HBV, downsample = 10, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result$cox_b0
result$cox_b1
result10 = CASCR(REVEAL_HBV, downsample = 10, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result15 = CASCR(REVEAL_HBV, downsample = 15, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result10$cox_b1
result15$cox_b1
result10$cox_b1
result15$cox_b1$cum_haz$cum_haz %in% result10$cox_b1$cum_haz$cum_haz
plot(result10$cox_b1$cum_haz$time, result10$cox_b1$cum_haz$cum_haz, type = 'l')
lines(result15$cox_b1$cum_haz$time, result15$cox_b1$cum_haz$cum_haz, type = 'l')
result$alpha
plot(result10$DE$time, result10$alpha[1, ], type = 'l')
plot(result15$DE$time, result15$alpha[1, ], type = 'l')
plot(result10$DE$time, result10$alpha[1, ], type = 'l')
lines(result15$DE$time, result15$alpha[1, ], type = 'l')
plot(result10$DE$time, result10$alpha[2, ], type = 'l')
lines(result15$DE$time, result15$alpha[2, ], type = 'l')
plot(result10$DE$time, result10$alpha[3, ], type = 'l')
lines(result15$DE$time, result15$alpha[3, ], type = 'l')
result10$DE$time
result15$DE$time
result10$alpha[, 1]
result15$alpha[, 1]
result15$alpha[, 2]
result10$alpha[, 2]
result10$alpha[, 3]
result10$alpha[, 4]
result10$alpha[, 5]
result10$alpha[, 6]
remove.packages("CausalAnalysisforSemiCompRisks")
devtools::install_github("eric40065/CausalAnalysisforSemiCompRisks")
library(CausalAnalysisforSemiCompRisks)
result10 = CASCR(REVEAL_HBV, downsample = 10, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result10$alpha[, 1]
remove.packages("CausalAnalysisforSemiCompRisks")
result10 = CASCR(REVEAL_HBV, downsample = 10, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result10 = CASCR(REVEAL_HBV, downsample = 10, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
devtools::install_github("eric40065/CausalAnalysisforSemiCompRisks")
library(CausalAnalysisforSemiCompRisks)
result10 = CASCR(REVEAL_HBV, downsample = 10, get_variance = 'asymptotic', plot_result = T, num_of_cores = 10)
result10$alpha[, 1]
result10$alpha[, 2]
result10$alpha[, 3]
result10$alpha[, 4]
result10$alpha[, 5]
result10$alpha[, 6]
rm(list = setdiff(ls(), "pm25_org"))
rm(list = setdiff(ls(), "pm25_org"))
pm25_org = read.csv("/Users/js/Downloads/Daily_PM2.5_Concentrations_All_County__2001-2016.csv", header = TRUE)
start_yr = 2003; end_yr = 2011
pm25 = pm25_org[start_yr <= pm25_org$year & pm25_org$year <= end_yr, c(3:8, 1, 2)]; colnames(pm25)[length(colnames(pm25))] = 'fulldate';
pm25$month = substr(pm25$fulldate, 3, 5)
pm25$date = as.numeric(substr(pm25$fulldate, 1, 2))
pm25$fulldate = NULL
states_list = sort(unique(pm25$statefips))
sort_state = sort(pm25$statefips, index.return = T)$ix
pm25_sort = pm25[sort_state, ]
sort_county = sort(pm25_sort$countyfips, index.return = T)$ix
pm25_sort = pm25_sort[sort_county, ]
num_of_county = length(unique(pm25_sort$statefips * 1e5 + pm25_sort$countyfips))
pm25_mon = data.frame(matrix(ncol = dim(pm25)[2] - 1, nrow = 12 * (end_yr - start_yr + 1) * num_of_county))
colnames(pm25_mon) = colnames(pm25)[1:(length(colnames(pm25)) - 1)]
num_data_per_county = sum(pm25_sort$statefips == 1 &pm25_sort$countyfips == 1)
i = 1; j = 2003; k = 1
count = 0
month_list = unique(pm25_sort$month[1:365])
for(i in 1:num_of_county){
print(i)
now_data = pm25_sort[((i - 1) * num_data_per_county + 1) : (i * num_data_per_county), ]
if(sum(var(now_data[, 1:2]))>0){stop("123")}
for(j in start_yr:end_yr){
for(k in 1:12){
count = count + 1
month = month_list[k]
pm25_mon[count, 1:2] = now_data[1, 1:2]
pm25_mon[count, 3:(dim(pm25)[2] - 3)] = colMeans(now_data[now_data$year == j & now_data$month == month, 3:(dim(pm25)[2] - 3)])
pm25_mon$year[count] = j
pm25_mon$month[count] = month
}
}
}
state_list = sort(unique(pm25_mon$statefips))
county_list = vector(mode = "list", length = length(state_list))
counter = 0
for(i in state_list){
counter = counter + 1
county_list[[counter]] = sort(unique(pm25_mon$countyfips[pm25_mon$statefips == i]))
}
devtools::document()
devtools::install()
dat = read.csv(file = '/Users/js/Downloads/TDF\ vs\ Placebo\ for\ mild\ CHB.csv')
colnames(dat)
remove.packages("CausalAnalysisforSemiCompRisks")
