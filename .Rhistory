cox_hat_0$cum_haz$cum_haz = small_cox_b0$cum_haz$cum_haz/exp(beta_U ^ 2/2)
cox_hat_1$cum_haz$cum_haz = small_cox_b1$cum_haz$cum_haz/exp(beta_U ^ 2/2)
## adjust counterfactual hazard
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, alpha_hat, cox_hat_0, cox_hat_1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, alpha_hat, cox_hat_0, cox_hat_1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
case3$effect[[counter]] = data.frame(time = estimation_alpha$time, effect = counterfactual_hazard)
}
## case 4
counter = 0
gamma_list = seq(-1, 1, by = 0.2)
case4 = list(gamma = gamma_list, effect = vector(mode = 'list', length = length(gamma_list)))
for(gamma in gamma_list){
counter = counter + 1
alpha_U = gamma
beta_U = gamma
gamma_Z = 1.2
gamma_Z2 = 1.2
gamma_n1 = 1.2
## adjust alpha
alpha_hat$coeff[1, ] = estimation_alpha$coeff[1, ] - 1/2 * alpha_U^2
alpha_hat$coeff[2, ] = estimation_alpha$coeff[2, ] - alpha_U * gamma_Z2
## adjust beta
cox_hat_0$coeff = small_cox_b0$coeff - beta_U * gamma_Z
cox_hat_1$coeff = small_cox_b1$coeff - beta_U * gamma_Z
cox_hat_0$cum_haz$cum_haz = small_cox_b0$cum_haz$cum_haz/exp(beta_U ^ 2/2)
cox_hat_1$cum_haz$cum_haz = small_cox_b1$cum_haz$cum_haz/exp(beta_U ^ 2/2)
## adjust counterfactual hazard
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, alpha_hat, cox_hat_0, cox_hat_1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, alpha_hat, cox_hat_0, cox_hat_1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
case4$effect[[counter]] = data.frame(time = estimation_alpha$time, effect = counterfactual_hazard)
}
## case 5
counter = 0
gamma_list = seq(-1, 1, by = 0.2)
case5 = list(gamma = gamma_list, effect = vector(mode = 'list', length = length(gamma_list)))
for(gamma in gamma_list){
counter = counter + 1
alpha_U = 0
beta_U = 0
gamma_Z = gamma
gamma_Z2 = gamma
gamma_n1 = gamma
## adjust alpha
alpha_hat$coeff[1, ] = estimation_alpha$coeff[1, ] - 1/2 * alpha_U^2
alpha_hat$coeff[2, ] = estimation_alpha$coeff[2, ] - alpha_U * gamma_Z2
## adjust beta
cox_hat_0$coeff = small_cox_b0$coeff - beta_U * gamma_Z
cox_hat_1$coeff = small_cox_b1$coeff - beta_U * gamma_Z
cox_hat_0$cum_haz$cum_haz = small_cox_b0$cum_haz$cum_haz/exp(beta_U ^ 2/2)
cox_hat_1$cum_haz$cum_haz = small_cox_b1$cum_haz$cum_haz/exp(beta_U ^ 2/2)
## adjust counterfactual hazard
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, alpha_hat, cox_hat_0, cox_hat_1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, alpha_hat, cox_hat_0, cox_hat_1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
case5$effect[[counter]] = data.frame(time = estimation_alpha$time, effect = counterfactual_hazard)
}
return(list(case1 = case1, case2 = case2, case3 = case3, case4 = case4, case5 = case5))
}
## counterfactual hazard
get_counterfactual_hazard = function(za_iv, zb_iv, cal_level, estimation_alpha, cox_b0, cox_b1){
# cal_level = cal_level_tmp
# za_iv = za_iv1; zb_iv = zb_iv1;
# za_iv = za_iv2; zb_iv = zb_iv2;
# cox_b0 = small_cox_b0; cox_b1 = small_cox_b1
intercept = 1
w_prob = as.vector(1/(1 + exp(-crossprod(c(intercept, zb_iv, cal_level), estimation_alpha$coeff))))
# pi1 = as.vector(1/(1 + exp(-crossprod(c(intercept, 1, cal_level), estimation_alpha$coeff))))
# pi0 = as.vector(1/(1 + exp(-crossprod(c(intercept, 0, cal_level), estimation_alpha$coeff))))
# w_diff = pi1 - pi0
# diff_1 = approx(x = small_cox_b1$cum_haz$time, y = diff(c(0, small_cox_b1$cum_haz$cum_haz)), xout = estimation_alpha$time, method = 'constant', rule = 2)$y * exp(cox_b1$coeff[1]); diff_1[!group_1_time] = 0
# diff_2 = approx(x = small_cox_b0$cum_haz$time, y = diff(c(0, small_cox_b0$cum_haz$cum_haz)), xout = estimation_alpha$time, method = 'constant', rule = 2)$y * exp(cox_b0$coeff[1]); diff_2[!group_0_time] = 0
# d_diff = diff_1 - diff_2
# IE = cumsum(w_diff * d_diff)
group_0_time = estimation_alpha$time %in% cox_b0$cum_haz$time
group_1_time = estimation_alpha$time %in% cox_b1$cum_haz$time
if(sum(group_0_time) > 0){
w0 = 1 - w_prob[group_0_time]
dLbase_0 = diff(c(0, cox_b0$cum_haz$cum_haz))
dL0 = dLbase_0 * exp(sum(c(za_iv, cal_level) * cox_b0$coeff))
n1_0 = my_eva_fun(list(cumsum(w0 * dL0), cox_b0$cum_haz$time), estimation_alpha$time, rule = '0')
}else{
n1_0 = rep(0, length(group_0_time))
}
if(sum(group_1_time) > 0){
w1 = w_prob[group_1_time]
dLbase_1 = diff(c(0, cox_b1$cum_haz$cum_haz))
dL1 = dLbase_1 * exp(sum(c(za_iv, cal_level) * cox_b1$coeff))
n1_1 = my_eva_fun(list(cumsum(w1 * dL1), cox_b1$cum_haz$time), estimation_alpha$time, rule = '0')
}else{
n1_1 = rep(0, length(group_1_time))
}
counterfactual_hazard = n1_0 + n1_1
return(counterfactual_hazard)
}
estimate_effect = function(df, effect, intervention, cal_level, sen_ana, GetVariance, boot_times, timer, parallel, unique_T2, b0_time, b1_time, variance_method, threshold){
## beta part
# auxiliary
m = dim(df)[1]
n_col = dim(df)[2]
num_covariates = n_col - 4
covariates = as.matrix(df[, 4+1:num_covariates])
# b0
time_b0 = cbind(rep(0, m), df$T1)
observed_b0 = df$d2 & (df$d1 == FALSE)
cox_b0 = mycoxph(time_b0, observed_b0, covariates, GetVariance)
# b1
df_b1 = df[df$d1, ]
time_b1 = df_b1[, c(1, 2)]
observed_b1 = df_b1$d2
cox_b1 = mycoxph(time_b1, observed_b1, as.matrix(covariates[df$d1, ]), GetVariance)
# make it small
#-----------------------------------------------------------------------------------------------#
# small cox will be used while computing the covariance of alphas and the counterfactual hazard #
# cox will be used while computing the variance                                                 #
#-----------------------------------------------------------------------------------------------#
small_cox_b0 = make_small(cox_b0, b0_time)
small_cox_b1 = make_small(cox_b1, b1_time)
## alpha part
estimation_alpha = estimate_alpha(df, cal_level, small_cox_b0, small_cox_b1, unique_T2, GetVariance, timer, parallel, variance_method, threshold)
## get counterfactual hazard
AsymVariance = sum(c('a', 'A', 'asym', 'asymptotic', 'asymptotical', 'Asym', 'Asymptotic', 'Asymptotical') %in% GetVariance) > 0
get_DE = sum(c('d', 'D', 'de', 'De', 'DE', 'direct effect', 'Direct effect', 'Direct Effect') %in% effect) > 0
get_IE = sum(c('i', 'I', 'ie', 'Ie', 'IE', 'indirect effect', 'Indirect effect', 'Indirect Effect') %in% effect) > 0
result = list()
## Direct effect
if(get_DE){
za_iv1 = intervention[1]; zb_iv1 = intervention[2]; za_iv2 = intervention[2]; zb_iv2 = intervention[2];
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
weight = sqrt(estimation_alpha$sick_alive * estimation_alpha$healthy_alive)/estimation_alpha$alive
result$DE$Q_stat = sum(counterfactual_hazard * weight) / sum(weight)
result$DE$effect = counterfactual_hazard
result$DE$time = estimation_alpha$time
if(AsymVariance){
result$DE$variance = get_variance(get_DE = TRUE, get_IE = FALSE, intervention, cal_level, estimation_alpha, cox_b0, cox_b1, b0_time, b1_time)
result$DE$asym_lower = result$DE$effect - 1.96 * sqrt(result$DE$variance$variance)
result$DE$asym_upper = result$DE$effect + 1.96 * sqrt(result$DE$variance$variance)
}
if(sen_ana){result$DE$sensitivity_analysis = do_sen_ana(get_DE = TRUE, get_IE = FALSE, intervention, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)}
}
## Indirect effect
if(get_IE){
za_iv1 = intervention[1]; zb_iv1 = intervention[1]; za_iv2 = intervention[1]; zb_iv2 = intervention[2];
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
weight = sqrt(estimation_alpha$sick_alive * estimation_alpha$healthy_alive)/estimation_alpha$alive
result$IE$Q_stat = sum(counterfactual_hazard * weight) / sum(weight)
result$IE$effect = counterfactual_hazard
result$IE$time = estimation_alpha$time
if(AsymVariance){
result$IE$variance = get_variance(get_DE = FALSE, get_IE = TRUE, intervention, cal_level, estimation_alpha, cox_b0, cox_b1)
result$IE$asym_lower = result$IE$effect - 1.96 * sqrt(result$IE$variance$variance)
result$IE$asym_upper = result$IE$effect + 1.96 * sqrt(result$IE$variance$variance)
}
if(sen_ana){result$IE$sensitivity_analysis = do_sen_ana(get_DE = FALSE, get_IE = TRUE, intervention, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)}
}
result$alive = estimation_alpha$alive
result$healthy_alive = estimation_alpha$healthy_alive
result$sick_alive = estimation_alpha$sick_alive
result$converged_alpha = estimation_alpha$converged_alpha
result$alpha = estimation_alpha$coeff
result$cox_b0 = list(coeff = cox_b0$coeff, cum_haz = cox_b0$cum_haz)
result$cox_b1 = list(coeff = cox_b1$coeff, cum_haz = cox_b1$cum_haz)
return(result)
}
# protect the original data
dff = df
#
df = data_preprocess(dff, myunit, downsample)
unique_T2 = df$unique_T2
b0_time = df$b0_time
b1_time = df$b1_time
df = df_shift_to_cal_level(df$df, cal_level)
ana_cal_level = df$cal_level
df = df$df
cal_level = ana_cal_level
## beta part
# auxiliary
m = dim(df)[1]
n_col = dim(df)[2]
num_covariates = n_col - 4
covariates = as.matrix(df[, 4+1:num_covariates])
# b0
time_b0 = cbind(rep(0, m), df$T1)
observed_b0 = df$d2 & (df$d1 == FALSE)
cox_b0 = mycoxph(time_b0, observed_b0, covariates, GetVariance)
# b1
df_b1 = df[df$d1, ]
time_b1 = df_b1[, c(1, 2)]
observed_b1 = df_b1$d2
cox_b1 = mycoxph(time_b1, observed_b1, as.matrix(covariates[df$d1, ]), GetVariance)
small_cox_b0 = make_small(cox_b0, b0_time)
small_cox_b1 = make_small(cox_b1, b1_time)
## alpha part
estimation_alpha = estimate_alpha(df, cal_level, small_cox_b0, small_cox_b1, unique_T2, GetVariance, timer, parallel, variance_method, threshold)
parallel = 10
## alpha part
estimation_alpha = estimate_alpha(df, cal_level, small_cox_b0, small_cox_b1, unique_T2, GetVariance, timer, parallel, variance_method, threshold)
## get counterfactual hazard
AsymVariance = sum(c('a', 'A', 'asym', 'asymptotic', 'asymptotical', 'Asym', 'Asymptotic', 'Asymptotical') %in% GetVariance) > 0
get_DE = sum(c('d', 'D', 'de', 'De', 'DE', 'direct effect', 'Direct effect', 'Direct Effect') %in% effect) > 0
get_IE = sum(c('i', 'I', 'ie', 'Ie', 'IE', 'indirect effect', 'Indirect effect', 'Indirect Effect') %in% effect) > 0
result = list()
za_iv1 = intervention[1]; zb_iv1 = intervention[2]; za_iv2 = intervention[2]; zb_iv2 = intervention[2];
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
weight = sqrt(estimation_alpha$sick_alive * estimation_alpha$healthy_alive)/estimation_alpha$alive
result$DE$Q_stat = sum(counterfactual_hazard * weight) / sum(weight)
result$DE$effect = counterfactual_hazard
result$DE$time = estimation_alpha$time
if(AsymVariance){
result$DE$variance = get_variance(get_DE = TRUE, get_IE = FALSE, intervention, cal_level, estimation_alpha, cox_b0, cox_b1, b0_time, b1_time)
result$DE$asym_lower = result$DE$effect - 1.96 * sqrt(result$DE$variance$variance)
result$DE$asym_upper = result$DE$effect + 1.96 * sqrt(result$DE$variance$variance)
}
sen_ana = T
if(sen_ana){result$DE$sensitivity_analysis = do_sen_ana(get_DE = TRUE, get_IE = FALSE, intervention, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)}
## Indirect effect
if(get_IE){
za_iv1 = intervention[1]; zb_iv1 = intervention[1]; za_iv2 = intervention[1]; zb_iv2 = intervention[2];
counterfactual_hazard_iv1 = get_counterfactual_hazard(za_iv1, zb_iv1, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard_iv2 = get_counterfactual_hazard(za_iv2, zb_iv2, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)
counterfactual_hazard = counterfactual_hazard_iv1 - counterfactual_hazard_iv2
weight = sqrt(estimation_alpha$sick_alive * estimation_alpha$healthy_alive)/estimation_alpha$alive
result$IE$Q_stat = sum(counterfactual_hazard * weight) / sum(weight)
result$IE$effect = counterfactual_hazard
result$IE$time = estimation_alpha$time
if(AsymVariance){
result$IE$variance = get_variance(get_DE = FALSE, get_IE = TRUE, intervention, cal_level, estimation_alpha, cox_b0, cox_b1)
result$IE$asym_lower = result$IE$effect - 1.96 * sqrt(result$IE$variance$variance)
result$IE$asym_upper = result$IE$effect + 1.96 * sqrt(result$IE$variance$variance)
}
if(sen_ana){result$IE$sensitivity_analysis = do_sen_ana(get_DE = FALSE, get_IE = TRUE, intervention, cal_level, estimation_alpha, small_cox_b0, small_cox_b1)}
}
result = estimate_effect(df, effect, intervention, cal_level = ana_cal_level, sen_ana, GetVariance, boot_times, timer, parallel, unique_T2, b0_time, b1_time, variance_method, threshold)
BootVariance = sum(c('b', 'B', 'boot', 'bootstrap', 'bootstrapping', 'Boot', 'Bootstrap', 'Bootstrapping') %in% GetVariance) > 0
BootVariance
get_DE = sum(c('d', 'D', 'de', 'De', 'DE', 'direct effect', 'Direct effect', 'Direct Effect') %in% effect) > 0
get_IE = sum(c('i', 'I', 'ie', 'Ie', 'IE', 'indirect effect', 'Indirect effect', 'Indirect Effect') %in% effect) > 0
my_eva_time = unique_T2
if(get_DE){
boot_DE_mat = matrix(0, boot_times, length(my_eva_time))
Q_stat_DE = rep(0, boot_times)
}
if(get_IE){
boot_IE_mat = matrix(0, boot_times, length(my_eva_time))
Q_stat_IE = rep(0, boot_times)
}
boot_times = 100
if(parallel){
require(foreach)
## fetch basic parameter
m = dim(df)[1]
## parallel set-up
if(is.numeric(parallel)){
cores = parallel
}else{
cores = detectCores() - 2
warning(paste0("Number of cores is not assigned. Use default ", cores, "."), immediate. = TRUE)
}
cl = snow::makeCluster(cores[1])
my_functions = c("downsample_func", "data_preprocess", "df_shift_to_cal_level", "do_sen_ana", "estimate_alpha", "estimate_effect", "form_matrix", "get_alpha_variance", "get_beta_variance", "get_counterfactual_hazard", "get_pd", "get_position", "get_variance", "inv_coxinformation", "make_small", "my_basehaz", "my_eva_fun", "my_sort_mat", "mycoxph", "rep.row")
snow::clusterExport(cl, my_functions)
doSNOW::registerDoSNOW(cl)
pb = txtProgressBar(max = boot_times, style = 3)
progress = function(n) setTxtProgressBar(pb, n)
opts = list(progress = progress)
boot_effect = foreach::foreach(i = 1:boot_times, .options.snow = opts, .combine = 'c', .export = my_functions) %dopar%{
set.seed(2020 + i)
boot_index = sample(1:m, m, replace = TRUE)
boot_df = dff[boot_index, ]
boot_df = data_preprocess(boot_df, myunit, downsample)
unique_T2 = boot_df$unique_T2
b0_time = boot_df$b0_time
b1_time = boot_df$b1_time
boot_df = df_shift_to_cal_level(boot_df$df, cal_level)
boot_cal_level = boot_df$cal_level
boot_df = boot_df$df
boot_effect = list(estimate_effect(boot_df, effect, intervention, cal_level = boot_cal_level, sen_ana = FALSE, GetVariance = NULL, boot_times = 0, timer = FALSE, parallel = FALSE, unique_T2, b0_time, b1_time, variance_method, threshold = 1e-15))
gc()
return(boot_effect)
}
stopCluster(cl)
pracma::fprintf('\n')
for(i in 1:boot_times){
if(get_DE){
Q_stat_DE[i] = boot_effect[[i]]$DE$Q_stat
boot_DE_mat[i, ] = my_eva_fun(list(boot_effect[[i]]$DE$effect, boot_effect[[i]]$DE$time), my_eva_time)
}
if(get_IE){
Q_stat_IE[i] = boot_effect[[i]]$IE$Q_stat
boot_IE_mat[i, ] = my_eva_fun(list(boot_effect[[i]]$IE$effect, boot_effect[[i]]$IE$time), my_eva_time)
}
}
}else{
## fetch basic parameter
m = dim(df)[1]
if(timer){
space = 100
pracma::fprintf('| bootstrap        20        30        40        50        60        70        80        90    100 |\n')
loop_count = 1:boot_times
counter_total = boot_times
cum_bar_num = my_eva_fun(list(1:space, 1:space / space * counter_total), loop_count, rule = '0')
bar_num = diff(c(0, cum_bar_num))
}
i = 1
for(i in 1:boot_times){
# print(i)
set.seed(2020 + i)
boot_index = sample(1:m, m, replace = TRUE)
boot_df = dff[boot_index, ]
boot_df = data_preprocess(boot_df, myunit, downsample)
unique_T2 = boot_df$unique_T2
b0_time = boot_df$b0_time
b1_time = boot_df$b1_time
boot_df = df_shift_to_cal_level(boot_df$df, cal_level)
boot_cal_level = boot_df$cal_level
boot_df = boot_df$df
boot_effect = estimate_effect(boot_df, effect, intervention, boot_cal_level, sen_ana = FALSE, GetVariance = NULL, boot_times = 0, timer = FALSE, parallel = FALSE, unique_T2, b0_time, b1_time, variance_method, threshold = 1e-15)
if(get_DE){
Q_stat_DE[i] = boot_effect$DE$Q_stat
boot_DE_mat[i, ] = my_eva_fun(list(boot_effect$DE$effect, boot_effect$DE$time), my_eva_time)
}
if(get_IE){
Q_stat_IE[i] = boot_effect$IE$Q_stat
boot_IE_mat[i, ] = my_eva_fun(list(boot_effect$IE$effect, boot_effect$IE$time), my_eva_time)
}
if(timer && bar_num[i] > 0){for(i in 1:bar_num[i]){pracma::fprintf('-')}}
}
if(timer){pracma::fprintf('\n')}
}
snow::stopCluster(cl)
pracma::fprintf('\n')
for(i in 1:boot_times){
if(get_DE){
Q_stat_DE[i] = boot_effect[[i]]$DE$Q_stat
boot_DE_mat[i, ] = my_eva_fun(list(boot_effect[[i]]$DE$effect, boot_effect[[i]]$DE$time), my_eva_time)
}
if(get_IE){
Q_stat_IE[i] = boot_effect[[i]]$IE$Q_stat
boot_IE_mat[i, ] = my_eva_fun(list(boot_effect[[i]]$IE$effect, boot_effect[[i]]$IE$time), my_eva_time)
}
}
## fetch basic parameter
m = dim(df)[1]
if(timer){
space = 100
pracma::fprintf('| bootstrap        20        30        40        50        60        70        80        90    100 |\n')
loop_count = 1:boot_times
counter_total = boot_times
cum_bar_num = my_eva_fun(list(1:space, 1:space / space * counter_total), loop_count, rule = '0')
bar_num = diff(c(0, cum_bar_num))
}
boot_times = 3
if(timer){
space = 100
pracma::fprintf('| bootstrap        20        30        40        50        60        70        80        90    100 |\n')
loop_count = 1:boot_times
counter_total = boot_times
cum_bar_num = my_eva_fun(list(1:space, 1:space / space * counter_total), loop_count, rule = '0')
bar_num = diff(c(0, cum_bar_num))
}
i = 1
for(i in 1:boot_times){
# print(i)
set.seed(2020 + i)
boot_index = sample(1:m, m, replace = TRUE)
boot_df = dff[boot_index, ]
boot_df = data_preprocess(boot_df, myunit, downsample)
unique_T2 = boot_df$unique_T2
b0_time = boot_df$b0_time
b1_time = boot_df$b1_time
boot_df = df_shift_to_cal_level(boot_df$df, cal_level)
boot_cal_level = boot_df$cal_level
boot_df = boot_df$df
boot_effect = estimate_effect(boot_df, effect, intervention, boot_cal_level, sen_ana = FALSE, GetVariance = NULL, boot_times = 0, timer = FALSE, parallel = FALSE, unique_T2, b0_time, b1_time, variance_method, threshold = 1e-15)
if(get_DE){
Q_stat_DE[i] = boot_effect$DE$Q_stat
boot_DE_mat[i, ] = my_eva_fun(list(boot_effect$DE$effect, boot_effect$DE$time), my_eva_time)
}
if(get_IE){
Q_stat_IE[i] = boot_effect$IE$Q_stat
boot_IE_mat[i, ] = my_eva_fun(list(boot_effect$IE$effect, boot_effect$IE$time), my_eva_time)
}
if(timer && bar_num[i] > 0){for(i in 1:bar_num[i]){pracma::fprintf('-')}}
}
if(timer){pracma::fprintf('\n')}
boot_variance_id = floor(boot_times * c(0.025, 0.975))
boot_variance_id[boot_variance_id == 0] = 1
if(get_DE){
result$DE$boot_lower_Q = boot_DE_mat[which(Q_stat_DE == sort(Q_stat_DE)[boot_variance_id[1]]), ]
result$DE$boot_upper_Q = boot_DE_mat[which(Q_stat_DE == sort(Q_stat_DE)[boot_variance_id[2]]), ]
}
if(get_IE){
result$IE$boot_lower_Q = boot_IE_mat[which(Q_stat_IE == sort(Q_stat_IE)[boot_variance_id[1]]), ]
result$IE$boot_upper_Q = boot_IE_mat[which(Q_stat_IE == sort(Q_stat_IE)[boot_variance_id[2]]), ]
}
if(get_DE){
boot_DE_mat = my_sort_mat(boot_DE_mat)
result$DE$boot_lower = boot_DE_mat[boot_variance_id[1], ]
result$DE$boot_upper = boot_DE_mat[boot_variance_id[2], ]
}
if(get_IE){
boot_IE_mat = my_sort_mat(boot_IE_mat)
result$IE$boot_lower = boot_IE_mat[boot_variance_id[1], ]
result$IE$boot_upper = boot_IE_mat[boot_variance_id[2], ]
}
plot_result
plot_result = T
if(plot_result){tryCatch(plot_CHH2020(result, my_eva_time), error = function(msg){
print('Something wrong with the plot function. Please tell me.')
return(NULL)
})
}
result$IE$boot_lower
result$DE$boot_lower
result$DE$boot_upper
result$IE$boot_upper
search()
install.packages("CausalAnalysisforSemiCompRisks")
devtools::install()
rm(list = ls())
library(CausalAnalysisforSemiCompRisks)
library("CausalAnalysisforSemiCompRisks")
load("/Users/js/Desktop/CHH2020/reveal_ttem3.RData")
df = work_ttem3[work_ttem3$GENDER == 1, c(1, 3, 2, 4, 5, 6, 8)]
CHH2020(df)
source('~/Desktop/CHH2020/CausalAnalysisforSemiCompRisks/R/load.R', echo=TRUE)
devtools::document()
devtools::load_all()
rm(list = ls())
devtools::document()
devtools::document()
devtools::install()
library(CausalAnalysisforSemiCompRisks)
load("/Users/js/Desktop/CHH2020/reveal_ttem3.RData")
df = work_ttem3[work_ttem3$GENDER == 1, c(1, 3, 2, 4, 5, 6, 8)]
aa = CHH2020(df, downsample = 30)
devtools::document()
?approx
devtools::document()
devtools::document()
?CHH2020
devtools::document()
?CHH2020
?approx
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
?approx
?sort
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
devtools::document()
?CHH2020
save(df, file = '/Users/js/Desktop/CHH2020/REVEAL_HBV.RData')
devtools::install()
df = load("/Users/js/Desktop/CHH2020/REVEAL_HBV.RData")
df
df = load("/Users/js/Desktop/CHH2020/reveal_ttem3.RData")
load("/Users/js/Desktop/CHH2020/REVEAL_HBV.RData")
devtools::use_data(df)
devtools::use_data(df)
REVEAL_HBV = df
save(REVEAL_HBV, file = "/Users/js/Desktop/CHH2020/REVEAL_HBV.RData")
rm(list = ls())
load("/Users/js/Desktop/CHH2020/REVEAL_HBV.RData")
library(devtools)
use_data(REVEAL_HBV)
rm(list = ls())
REVEAL_HBV
load(REVEAL_HBV.rda)
load(data/REVEAL_HBV.rda)
load("REVEAL_HBV.rda")
load("data/REVEAL_HBV.rda")
getwd()
CHH2020(REVEAL_HBV, myunit = 30)
result = CHH2020(REVEAL_HBV, myunit = 30)
install()
result = CHH2020(REVEAL_HBV, myunit = 90)
result$DE$variance
result = CHH2020(REVEAL_HBV, myunit = 90, plot_result = T)
result = CHH2020(REVEAL_HBV, myunit = 15, plot_result = T)
result = CHH2020(REVEAL_HBV, myunit = "raw", parallel = 10, plot_result = T)
result = CHH2020(REVEAL_HBV, myunit = "raw", num_of_cores = 10, plot_result = T)
.rs.restartR()
?remove.packages()
remove.packages("CausalAnalysisforSemiCompRisks")
